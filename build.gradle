plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'java'
	id 'maven-publish'
}

base {
	archivesName = "energy"
}

def ENV = System.getenv()
group = "teamreborn"
version = project.mod_version

loom {
	addRemapConfiguration("testModImplementation") {
		targetConfigurationName = "test"
		onCompileClasspath = true
		onRuntimeClasspath = true
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modApi fabricApi.module("fabric-transfer-api-v1", project.fabric_version)

	testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
	testModImplementation fabricApi.module("fabric-registry-sync-v0", project.fabric_version)
}

test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

jar {
	from "LICENSE"
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

publishing {
	publications {
		create("maven", MavenPublication) {
			groupId 'teamreborn'
			artifactId project.base.archivesName.get()
			version project.version

			from components.java
		}
	}
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/teamreborn/energy/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}
publish.mustRunAfter checkVersion